// ==TouchbarPacket==
// @name YouTube
// @match https://www.youtube.com/*
// ==/TouchbarPacket==

/* global touchbar:readonly */

console.log('TOUCHBAR SCRIPT EXECUTING on', window.location.href)

let onEventFunction = null
touchbar.addEventListener(message => {
  if (onEventFunction) onEventFunction(message)
})

configureTouchbar()
function configureTouchbar() {
  console.log('Configuring touchbar')
  if (window.location.pathname === '/watch') {
    // Video page
    setupVideoPage()
  } else {
    // Home page
    setupGeneralNavigation()
  }
}

function setupGeneralNavigation() {
  const ACTION_HOME = 'navigate-home'
  const ACTION_TRENDING = 'navigate-trending'
  const ACTION_SUBSCRIPTIONS = 'navigate-subscriptions'
  const ACTION_SHORTS = 'navigate-shorts'

  touchbar.changeLayout([
    {
      type: 'button',
      name: ACTION_HOME,
      label: 'Home',
    },
    {
      type: 'button',
      name: ACTION_TRENDING,
      label: 'Trending',
    },
    {
      type: 'button',
      name: ACTION_SHORTS,
      label: 'Shorts',
    },
    {
      type: 'button',
      name: ACTION_SUBSCRIPTIONS,
      label: 'Subscriptions',
    },
  ])

  onEventFunction = message => {
    if (message.type == 'action') {
      const menuItems = document.querySelectorAll(
        '#items > ytd-guide-entry-renderer'
      )
      switch (message.name) {
        case ACTION_HOME:
          if (menuItems) {
            menuItems[0].click()
          } else {
            location.href = '/'
          }
          break
        case ACTION_TRENDING:
          if (menuItems) {
            menuItems[1].click()
          } else {
            location.href = '/feed/trending'
          }
          break
        case ACTION_SHORTS:
          if (menuItems) {
            menuItems[2].click()
          }
          break 
        case ACTION_SUBSCRIPTIONS:
          if (menuItems) {
            menuItems[3].click()
          } else {
            location.href = '/feed/subscriptions'
          }
          break
      }
    }
  }
}

function formatTimestamp(time) {
  let minutes = Math.floor(time / 60)
  let seconds = Math.floor(time - 60 * minutes)

  if (seconds < 10) seconds = '0' + seconds

  return `${minutes}:${seconds}`
}

function setupVideoPage() {
  console.log('configuring touchbar for video page')

  const PLAYBACK_SLIDER = 'playback-slider'
  const MEDIA_PLAYPAUSE_BUTTON = 'media-playpause'
  const ICON_PLAY = 'NSTouchBarPlayTemplate'
  const ICON_PAUSE = 'NSTouchBarPauseTemplate'

  const video = document.querySelector('video.video-stream')
  if (!video) {
    console.log('video page not loaded yet, waiting...')
    setTimeout(setupVideoPage, 1000)
    return
  }

  const updateLayout = () => {
    let playPauseButton
    if (video.paused) {
      playPauseButton = {
        type: 'button',
        name: MEDIA_PLAYPAUSE_BUTTON,
        icon: ICON_PLAY,
      }
    } else {
      playPauseButton = {
        type: 'button',
        name: MEDIA_PLAYPAUSE_BUTTON,
        icon: ICON_PAUSE,
      }
    }

    const playbackSlider = {
      type: 'slider',
      name: PLAYBACK_SLIDER,
      label: formatTimestamp(video.currentTime),
      value: video.currentTime / video.duration,
      color: '#ff0000',
    }

    console.log(playbackSlider)

    touchbar.changeLayout([playPauseButton, playbackSlider])
  }

  updateLayout()

  let updateInterval = null

  video.addEventListener('play', () => {
    onPlayEvent()
  })

  if (!video.paused) {
    onPlayEvent()
  }

  function onPlayEvent() {
    touchbar.updateItem(MEDIA_PLAYPAUSE_BUTTON, {
      icon: ICON_PAUSE,
    })

    updateInterval = setInterval(() => {
      touchbar.updateItem(PLAYBACK_SLIDER, {
        value: video.currentTime / video.duration,
        label: formatTimestamp(video.currentTime),
      })
    }, 500)
  }

  video.addEventListener('pause', () => {
    touchbar.updateItem(MEDIA_PLAYPAUSE_BUTTON, {
      icon: ICON_PLAY,
    })

    clearInterval(updateInterval)
  })

  onEventFunction = message => {
    if (message.type == 'action' && message.target == 'button') {
      switch (message.name) {
        case MEDIA_PLAYPAUSE_BUTTON:
          if (video.paused) {
            video.play()
          } else {
            video.pause()
          }
          break
      }
    }

    if (message.type == 'action' && message.target == 'slider') {
      if (message.name == PLAYBACK_SLIDER) {
        console.log('new slider position', message.value)

        const newTime = video.duration * message.value
        video.currentTime = newTime
        updateLayout()
      }
    }
  }
}

hookPageChanges()
function hookPageChanges() {
  let oldHref = location.href

  const observer = new MutationObserver(() => {
    if (oldHref != document.location.href) {
      oldHref = document.location.href
      console.log('page changed')
      configureTouchbar()
    }
  })

  observer.observe(document.querySelector('body'), {
    childList: true,
    subtree: true,
  })
}
